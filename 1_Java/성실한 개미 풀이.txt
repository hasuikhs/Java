/*
	미로 상자에 넣은 개미는 먹이를 찾았거나, 더 이상 움직일 수 없을 때까지
	오른쪽 또는 아래쪽으로만 움직였다.

	미로 상자의 구조가 0(갈 수 있는 곳), 1(벽 또는 장애물)로 주어지고,
	먹이가 2로 주어질 때, 성실한 개미의 이동 경로를 예상해보자.

	단, 맨 아래의 가장 오른쪽에 도착한 경우, 더 이상 움직일 수 없는 경우, 먹이를 찾은 경우에는
	더이상 이동하지 않고 그 곳에 머무른다고 가정한다.


	미로 상자의 테두리는 모두 벽으로 되어 있으며,
	개미집은 반드시 (2, 2)에 존재하기 때문에 개미는 (2, 2)에서 출발한다. 
 */

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
    	
    	int[][] pan = new int[11][11];   	
    	
    	for(int i = 1; i <= 10; i++) {
    		for(int j = 1; j <= 10; j++) {
    			pan[i][j] = sc.nextInt();
    		}
    	}
    	boolean start = true;
    	if (pan[2][2] == 2) {
    		pan[2][2] = 9;
    		start = false;
    	} else if(pan[2][2] != 2) {
    		pan[2][2] = 9;
    	}
    	
    	boolean goal = false; 
    	for(int i = 1; i <= 10; i++) {
    		for(int j = 1; j <= 10; j++) {
    			if(pan[i][j] == 9 && goal == false && start == true) {
    				if(pan[i][j + 1] == 0) {
    					if(j + 1 < 10) {
    						pan[i][j + 1] = 9;
    					}
    				}else if(pan[i][j + 1] == 2) {
    					if(j + 1 < 10) {
    						pan[i][j + 1] = 9;
    						goal = true;
    					}
    				}
    				else if(pan[i][j + 1] == 1 && start == true){
    					if(i + 1 < 10) {
    						if(pan[i + 1][j] != 2) {
    							pan[i + 1][j] = 9;
    						}else if(pan[i + 1][j] == 2){
    							pan[i + 1][j] = 9;
    							goal = true;
    							break;
    						}
    					}
    				}
    			}
    		}
    	}
    	
    	for(int i = 1; i <= 10; i++) {
    		for(int j = 1; j <= 10; j++) {
    			System.out.print(pan[i][j] + " ");
    		}
    		System.out.println();
    	}
    }
}
